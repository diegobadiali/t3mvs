'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Location = function () {
  function Location(_ref) {
    var pathname = _ref.pathname,
        query = _ref.query,
        hash = _ref.hash;

    _classCallCheck(this, Location);

    this.pathname = pathname;
    this.query = typeof query === 'string' ? searchToObject(query) : query;
    this.hash = hash;
  }

  _createClass(Location, [{
    key: 'toString',
    value: function toString() {
      var href = this.pathname;
      var query = objectToSearch(this.query);
      if (query) href += '?' + query;
      return href;
    }
  }, {
    key: 'update',
    value: function update(location) {
      var pathname = this.pathname,
          query = this.query,
          hash = this.hash;

      location = Object.assign({ pathname: pathname, query: query, hash: hash }, location);
      location = new Location(location);
      return location;
    }
  }, {
    key: 'hrefFor',
    value: function hrefFor(location) {
      return this.update(location).toString();
    }
  }]);

  return Location;
}();

exports.default = Location;


var searchToObject = function searchToObject(search) {
  return _querystring2.default.parse((search || '').replace(/^\?/, ''));
};

var objectToSearch = function objectToSearch(object) {
  return _querystring2.default.stringify(object);
};