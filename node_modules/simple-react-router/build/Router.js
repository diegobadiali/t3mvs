'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pathnameRouter = require('pathname-router');

var _pathnameRouter2 = _interopRequireDefault(_pathnameRouter);

var _Location = require('./Location');

var _Location2 = _interopRequireDefault(_Location);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SimpleReactRouter = function (_Component) {
  _inherits(SimpleReactRouter, _Component);

  function SimpleReactRouter(props) {
    _classCallCheck(this, SimpleReactRouter);

    var _this = _possibleConstructorReturn(this, (SimpleReactRouter.__proto__ || Object.getPrototypeOf(SimpleReactRouter)).call(this, props));

    if (process.env.NODE_ENV === 'development') {
      if (_this.routes && _this.getRoutes) throw new Error('you cannot define both routes() and getRoutes()');
      if (!_this.routes && !_this.getRoutes) throw new Error('you must define either routes() or getRoutes()');
    }

    _this.router = new Router({
      component: _this,
      staticRoutes: !!_this.routes,
      getRoutes: _this.routes || _this.getRoutes
    });
    return _this;
  }

  _createClass(SimpleReactRouter, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.router.unmount();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.router.update(nextProps);
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        location: this.router.location,
        redirectTo: this.router.redirectTo
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var router = this.router;

      if (!router.location.params) {
        return _react2.default.createElement('span', null, 'No Route Found');
      }
      var Component = router.location.params.Component;

      var props = Object.assign({}, this.props);
      props.location = router.location;
      props.router = router;
      return _react2.default.createElement(Component, props);
    }
  }]);

  return SimpleReactRouter;
}(_react.Component);

SimpleReactRouter.childContextTypes = {
  location: _react2.default.PropTypes.object.isRequired,
  redirectTo: _react2.default.PropTypes.func.isRequired
};
exports.default = SimpleReactRouter;

var Router = function () {
  function Router(_ref) {
    var component = _ref.component,
        staticRoutes = _ref.staticRoutes,
        getRoutes = _ref.getRoutes;

    _classCallCheck(this, Router);

    this.component = component;
    this.resolve = staticRoutes ? staticResolver(getRoutes) : dynamicResolver(getRoutes);
    this.rerender = this.rerender.bind(this);
    this.redirectTo = this.redirectTo.bind(this);
    addEventListener('popstate', this.rerender);
    this.update(component.props);
  }

  _createClass(Router, [{
    key: 'update',
    value: function update() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.component.props;

      this.location = new _Location2.default(location);
      this.location.params = this.resolve(this.location, props);
      this.component.location = this.location;
    }
  }, {
    key: 'rerender',
    value: function rerender() {
      this.update();
      this.component.forceUpdate();
    }
  }, {
    key: 'redirectTo',
    value: function redirectTo(href, replace) {
      if (replace) {
        history.replaceState(null, document.title, href);
      } else {
        history.pushState(null, document.title, href);
      }
      this.rerender();
    }
  }, {
    key: 'unmount',
    value: function unmount() {
      removeEventListener('popstate', this.rerender);
    }
  }]);

  return Router;
}();

var staticResolver = function staticResolver(mapper) {
  var router = instantiatePathnameRouter(mapper);
  return function (location) {
    return router.resolve(location.pathname);
  };
};

var dynamicResolver = function dynamicResolver(mapper) {
  return function (location, props) {
    return instantiatePathnameRouter(mapper, props).resolve(location.pathname);
  };
};

var instantiatePathnameRouter = function instantiatePathnameRouter(mapper, props) {
  var router = new _pathnameRouter2.default();
  var map = function map(path, Component) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return router.map(path, _extends({ Component: Component }, params));
  };
  mapper.call(null, map, props);
  return router;
};