'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _pathToRegexp = require('path-to-regexp');

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PathnameRouter = function () {
  function PathnameRouter() {
    _classCallCheck(this, PathnameRouter);

    this.routes = [];
    this.map = this.map.bind(this);
  }

  _createClass(PathnameRouter, [{
    key: 'map',
    value: function map(pathExpression, params) {
      var route = new Route(pathExpression, params);
      this.routes.push(route);
      return this;
    }
  }, {
    key: 'resolve',
    value: function resolve(pathname) {
      var resolvedRoute = void 0;
      this.routes.find(function (route) {
        return resolvedRoute = route.match(pathname);
      });
      return resolvedRoute;
    }
  }]);

  return PathnameRouter;
}();

exports.default = PathnameRouter;

var Route = function () {
  function Route(pathExpression, params) {
    _classCallCheck(this, Route);

    this.pathExpression = pathExpression;
    this.params = params;
    this.regexp = (0, _pathToRegexp2.default)(pathExpression);
  }

  _createClass(Route, [{
    key: 'match',
    value: function match(pathname) {
      var matches = this.regexp.exec(pathname);
      if (!matches) return false;
      var params = Object.assign({}, this.params);
      this.regexp.keys.forEach(function (key, index) {
        return params[key.name] = matches[index + 1];
      });
      return params;
    }
  }]);

  return Route;
}();

var searchToObject = function searchToObject(search) {
  return _querystring2.default.parse((search || '').replace(/^\?/, ''));
};